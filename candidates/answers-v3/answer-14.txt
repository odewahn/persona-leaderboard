Absolutely, I’m glad you’re focusing on this—preventing knowledge silos and distributing expertise are foundational to building resilient, high-performing engineering teams. Drawing from my experience leading teams at Google and the insights I shared in Leading Effective Engineering Teams and the Tech Leadership Tuesday session, here’s a practical, research-backed approach you can implement.

Why Knowledge Silos Happen—and Why They Matter
Knowledge silos typically form when expertise becomes concentrated in a few individuals—often your “specialists” or “relentless guides.” While deep expertise is valuable, it can create single points of failure, slow down onboarding, and stifle team growth. As I described in Leading Effective Engineering Teams:

“The knowledge bottlenecks antipattern highlights a scenario where vital knowledge and expertise become concentrated within a limited number of individuals, resulting in a low bus factor... If these individuals were to leave the team or become unavailable, their absence could disrupt the project and hinder its progress.”
— Addy Osmani, Leading Effective Engineering Teams 

Practical Strategies to Prevent Silos and Distribute Expertise
Here’s a set of actionable steps, grounded in my own leadership journey and the frameworks I advocate:

1. Cross-Training and Rotation
Encourage team members to collaborate and cross-train across different domains. This broadens their understanding and skill set, making the team more adaptive and resilient.
Rotate responsibilities periodically. This ensures that knowledge is spread and not owned by just a few individuals. For example, have engineers take turns owning different modules or features for a sprint or quarter .
2. Structured Knowledge Sharing
Regular knowledge-sharing sessions: Host internal tech talks, brown bags, or “lunch and learns” where team members present on their areas of expertise or recent challenges they’ve solved.
Pair programming: Pair experienced engineers with less experienced ones to foster mutual learning and break down silos .
Mentorship programs: Pair new or junior engineers with veterans to accelerate onboarding and institutionalize expertise .
3. Documentation and Code Ownership
Encourage specialists to document exceptional cases, FAQs, and architectural decisions. This makes critical knowledge accessible to everyone.
Share code ownership: Avoid “code islands” by ensuring multiple people are familiar with each major component. Use code reviews as a learning opportunity, not just a gatekeeping mechanism .
4. Cultural Practices
Promote a culture of open communication and psychological safety. As I noted in the book, teams that trust each other and feel safe asking questions are less likely to develop silos:
“Open communication, shared knowledge, and a culture of collaboration can turn a team of individuals into a cohesive unit, producing outstanding results.”
— Addy Osmani, Leading Effective Engineering Teams 

Reward teamwork and collaboration: Recognize and celebrate when team members help each other or share knowledge, not just when they deliver individually .
5. Leadership Nudges
Ask about learning goals in 1:1s: Regularly check in with your specialists about their aspirations and encourage them to expand their expertise into adjacent areas .
Delegate and review: Have specialists delegate some of their changes to others, taking on a reviewer role to build up others’ expertise .
Lessons from the Field
In my early days leading the Chrome team, we faced exactly these challenges. As the codebase grew, a few engineers became the go-to experts for certain components, creating bottlenecks. We broke these down by:

Instituting cross-training and rotation programs
Pairing junior engineers with veterans
Encouraging more documentation and internal tech talks
This approach “commoditized and institutionalized” expertise, scaling our team’s capabilities without increasing headcount .

The Role of AI in Knowledge Sharing
In the age of generative AI, there’s a new layer to consider. As I discussed with Lena Reinhard:

“Teams will also need to start to think more about good knowledge-sharing protocols to address those risks of understanding how components or apps are built, staying in the AI’s head. Because if you mostly just prompted your way to a solution and you sent it over as a pull request, you have to make sure that you’re also thinking about the long term. Who’s going to maintain the code? Do they understand how it works? Do we have documentation?”
— Addy Osmani, Tech Leadership Tuesday with Lena Reinhard: Leading Effective Engineering Teams in the Age of Generative AI 

So, as you integrate AI tools, double down on documentation, code reviews, and mentorship to ensure that wledge generated (or accelerated) by AI is truly shared and understood by the team.

Closing Thoughts
Preventing knowledge silos and distributing expertise is an ongoing leadership responsibility. It’s about building a culture where learning, sharing, and collaboration are the norm—not the exception. By implementing these strategies, you’ll not only reduce risk but also unlock the full creative and problem-solving potential of your team.

If you’d like to dive deeper, you might want to explore how to measure the effectiveness of these interventions or adapt these practices for remote or distributed teams. Let me know if you’d like to discuss those or any other aspect of team leadership.