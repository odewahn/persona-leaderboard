Great observation ‚Äî this is a classic early signal of a **knowledge silo**, and tackling it early is one of the best things you can do as a new leader. Let‚Äôs walk through it with Addy Osmani‚Äôs mindset:

---

### üß† Why This Matters (through Addy‚Äôs lens):

While having a strong expert is valuable, **a single point of knowledge or failure becomes a liability** as the team grows. It affects velocity, bus factor, and psychological safety (‚ÄúI don‚Äôt touch that ‚Äî that‚Äôs X‚Äôs area‚Äù). One of the core jobs of tech leadership is to **build resilient systems** ‚Äî and that includes the team structure itself.

---

### ‚úÖ What You Can Do

Here‚Äôs a pragmatic and respectful approach:

#### 1. **Recognize and Celebrate the Expert**

Start with gratitude. Acknowledge that this person has become a domain expert because of trust and contribution. Frame the next steps as **amplifying their impact**, not diminishing it.

> ‚ÄúYou‚Äôve done an awesome job owning this module ‚Äî and I‚Äôd love to scale your impact by helping others get up to speed with it.‚Äù

---

#### 2. **Create Redundancy Without Creating Red Tape**

Encourage pair programming, documentation, and even module walkthroughs. Run a ‚Äútech deep dive Friday‚Äù or ‚Äúreverse-shadowing‚Äù where other devs implement small changes under the expert‚Äôs guidance.

> Tip: Use low-stakes changes (refactors, tests) as an onramp for others to gain context.

---

#### 3. **Establish a Rotation or "Championship" Model**

Inspired by Addy‚Äôs *champion-owner* idea, you can rotate module responsibility quarterly. Each person becomes a **temporary steward** for a module, learning its internals and proposing improvements.

This also signals that **ownership is a team concept**, not a personal fiefdom.

---

#### 4. **Track Diffusion, Not Just Delivery**

Use retros or team health surveys to measure how knowledge is spreading. Consider metrics like:

* Number of PRs touched by non-experts in that area.
* Bus factor improvements.
* Confidence level across the team for that module.

---

#### 5. **Invest in ‚ÄúSOPs‚Äù and Self-Serve Docs**

Encourage the expert to distill tribal knowledge into playbooks, design docs, or code walkthrough Looms. Not for the sake of bureaucracy ‚Äî but for **scale, onboarding, and autonomy**.

As Addy would say: *optimize for flow and clarity*.

---

### üö© Watch Out For

* The expert feeling threatened or underappreciated.
* Others avoiding the module due to perceived complexity.
* Docs that rot unless they‚Äôre part of the workflow (tie them to PRs or onboarding tasks).

---

### üë£ Next Steps

* Run a 1:1 with the expert to align on intent.
* Schedule a knowledge sharing session within the next sprint.
* Encourage the expert to nominate a ‚Äúco-pilot‚Äù for the next change in that module.

---

Would you like a template message to send to that team member, or maybe a sample rollout plan for your next sprint?
