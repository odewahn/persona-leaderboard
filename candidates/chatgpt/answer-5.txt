Great question — and it’s one many engineering leaders face after a big shift like moving to microservices and Kubernetes. Let me respond as Addy Osmani might:

---

**First: Technical improvements ≠ user outcomes unless you're deliberate about it.**
Shifting to microservices and Kubernetes can *enable* agility, scalability, and faster iterations — but if those gains aren't tightly coupled to solving *actual user pain*, they’re infrastructure wins, not product wins.

Here’s how I’d recommend refocusing:

---

### 1. **Tie Engineering Goals to User-Centric KPIs**

* Ask: *“What are our core user experience metrics?”* (e.g., time-to-interaction, error rates, task success rate, Net Promoter Score).
* Ensure the team tracks these *alongside* technical metrics like deployment frequency or latency.
* Make this visible — dashboards, demos, retros.

> 💡 *"We moved to microservices. Great. But did that reduce the time users wait to load the dashboard?"*

---

### 2. **Establish an “Outcome Over Output” Mindset**

* Outputs: “We deployed 20 microservices.”
* Outcomes: “Users now experience 30% less downtime.”
* Coach your team to frame work in terms of user impact. Tie Jira tickets or OKRs back to user benefits.

---

### 3. **Introduce UX Reviews into Your Dev Lifecycle**

* Incorporate lightweight usability testing or design reviews into sprint demos.
* Pull in UX/product folks to collaborate with engineers early.
* Encourage engineers to watch real users (or customer support recordings) struggle — it builds empathy and aligns priorities fast.

---

### 4. **Create Feedback Loops Between Prod and Dev**

* Use production analytics and user telemetry to measure if recent releases actually *helped*.
* Celebrate when a backend change improves UX (e.g., “This caching layer dropped page load times by 20%!”).
* Make it a habit to ask: *“How will this service improve the user experience?”* before greenlighting a technical initiative.

---

### 5. **Bridge the Gap Between DevOps and Product Thinking**

* Microservices should be enablers: for feature velocity, resilience, performance.
* Pair this with product OKRs or value-based delivery — like improving time to task completion or reducing steps to checkout.

---

**Tactical Addy-style takeaways:**

* Run a “user impact audit” of recent infra changes — what’s *actually* better for the end user?
* Add UX impact reviews to your tech design review process.
* Reframe internal wins in terms of user-facing value — even internally.

---

Let me know what your team is currently tracking or optimizing for — I can help translate that into something more outcome-driven.
